#!/scratch/van/shared_envs/ambertools23/bin/python
import sys
from glob import glob
import numpy as np
import pytraj as pt

from organize import parse_input, mkdir, count_name
from topandas import matrix2dataframe
from topytraj import calc_pca
from quickplot import quickpcaplot


def get_eiganvalue(data):
    # Projection Data
    pc_data = data[0]
    pc1_data = data[1][0]                                      
    pc2_data = data[1][0]    
    return pc_data, pc1_data, pc2_data


def percent_variance(i, sum_i):
    return (i/ np.sum(sum_i[:])) * 100

def main():
    args = parse_input()
    trajectory = sorted(glob(f'{args.nc}*.nc'))
    parm = f'{args.parm}.parm7'

    traj = pt.iterload(trajectory, top=parm)
    data = calc_pca(traj, mask=f'{args.mask}', vecs=10)
    
    pc, pc1, pc2 = get_eiganvalue(data)       

    flip1 = 1                                                
    flip2 = 1                                                 
    x_data = _data[0] * flip1
    y_data = _data[1] * flip2

    results = matrix2dataframe(data)
    
    pc1_v = percent_variance(pc1, pc)
    pc2_v = percent_variance(pc1, pc)
    x_label = f"PC1 ({pc1_v:%.2f} %)"
    y_label = f"PC2 ({pc2_v:.2f} %)"
    xlabel="Time (ns)"
    ylabel="RMSD (Ã…)"

    mkdir('img')
    name = count_name('pca')
    quickpcaplot(xdata, ydata, xlabel, ylabel, name)


if __name__ == '__main__':
    main()

